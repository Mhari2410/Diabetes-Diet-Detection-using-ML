# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gf6iTRkq_xY8Je2YR8OAr-SY9QwhUim6
"""

from flask import Flask, render_template, request
import numpy as np
import pickle

# Load the trained model (make sure 'model.pkl' is in the same directory as app.py)
with open('/content/diabetes.pkl', 'rb') as file:
    model = pickle.load(file)

# Initialize Flask app
app = Flask(__name__)

# Route for the home page (form to input patient details)
@app.route('/')
def home():
    return render_template('index.html')  # Render the input form (index.html)

# Route to handle prediction when form is submitted
@app.route('/predict_diabetes', methods=['POST'])  # Renamed route to avoid conflicts
def predict_diabetes():  # Renamed function to avoid conflicts
    # Get the values from the form input
    pregnancies = int(request.form['pregnancies'])
    glucose = int(request.form['glucose'])
    blood_pressure = int(request.form['blood_pressure'])
    skin_thickness = int(request.form['skin_thickness'])
    insulin = int(request.form['insulin'])
    bmi = float(request.form['bmi'])
    diabetes_pedigree_function = float(request.form['diabetes_pedigree_function'])
    age = int(request.form['age'])

    # Create the input array for the model
    input_data = np.array([pregnancies, glucose, blood_pressure, skin_thickness, insulin, bmi, diabetes_pedigree_function, age])

    # Reshape the input for prediction (model expects a 2D array)
    input_data = input_data.reshape(1, -1)

    # Make prediction
    prediction = model.predict(input_data)

    # Convert prediction to human-readable result
    if prediction[0] == 1:
        result = "Diabetic"
    else:
        result = "Non-Diabetic"

    return render_template('result.html', result=result)  # Render result page with prediction

if __name__ == "__main__":
    app.run(debug=True)







